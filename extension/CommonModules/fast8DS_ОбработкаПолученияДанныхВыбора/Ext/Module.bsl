// MIT License
//
// Copyright (c) 2023 FAST8.RU
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#Область ПрограммныйИнтерфейс

Процедура ОбработатьПредставлениеДокументаБизнесПроцесса(ГруппаМетаданных, Менеджер, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	ИмяМетаданного = СтрЗаменить(Строка(Менеджер), СтрШаблон("%1Менеджер.", ГруппаМетаданных), "");
	СтрокаПоиска = Параметры.СтрокаПоиска;
	Если ЯвляетсяНачаломПредставленияДокументаБизнесПроцесса(СтрокаПоиска, ГруппаМетаданных, ИмяМетаданного) Тогда
		// Разбор представления документа или бизнес-процесса
		ПозицияПробела = СтрНайти(СтрокаПоиска, " ");
		НомерДокумента = СокрЛП(Лев(СтрокаПоиска, ПозицияПробела));
		СтрокаПоиска = СокрЛП(СтрЗаменить(СтрокаПоиска, НомерДокумента, ""));
		СтрокаПоиска = СокрЛП(СтрЗаменить(СтрокаПоиска, "от", ""));
		ТипДата = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ДатаДокумента = ТипДата.ПривестиЗначение(СтрокаПоиска);
		
		Запрос = Новый Запрос;
		Условия = ДописатьОтбор(Запрос, Параметры);
		Запрос.Текст = СтрШаблон("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2 Ссылка ИЗ %1.%2 ГДЕ Номер = &Номер И Дата = &Дата %3", ГруппаМетаданных, ИмяМетаданного, Условия);
		Запрос.УстановитьПараметр("Номер", НомерДокумента);
		Запрос.УстановитьПараметр("Дата", ДатаДокумента);
		
		ВыполнитьВыборку(Запрос, Истина, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		// Разбор внутренней навигационной ссылки и уникального идентификатора
		ОбработатьНавигационнуюСсылкуИУникальныйИдентификатор(ГруппаМетаданных, Менеджер, ДанныеВыбора, Параметры, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПредставлениеДокумента()

Процедура ОбработатьПредставлениеЗадачи(Менеджер, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	ИмяМетаданного = СтрЗаменить(Строка(Менеджер), "ЗадачаМенеджер.", "");
	СтрокаПоиска = СокрЛП(Параметры.СтрокаПоиска);
	Длина = СтрДлина(СтрокаПоиска);
	Если Длина > 23 И Сред(СтрокаПоиска, Длина - 22, 4) = " от " И СимволПоНомеру(СтрокаПоиска, Длина - 16) = "." И СимволПоНомеру(СтрокаПоиска, Длина - 5) = ":" Тогда
		// Разбор представления задачи
		Наименование = Лев(СтрокаПоиска, Длина - 23);
		СтрокаПоиска = Прав(СтрокаПоиска, 19);
		ТипДата = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ДатаДокумента = ТипДата.ПривестиЗначение(СтрокаПоиска);
		
		Запрос = Новый Запрос;
		Условия = ДописатьОтбор(Запрос, Параметры);
		Запрос.Текст = СтрШаблон("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2 Ссылка ИЗ Задача.%1 ГДЕ Наименование = &Наименование И Дата = &Дата %2", ИмяМетаданного, Условия);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("Дата", ДатаДокумента);
		
		ВыполнитьВыборку(Запрос, Истина, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		// Разбор внутренней навигационной ссылки и уникального идентификатора
		ОбработатьНавигационнуюСсылкуИУникальныйИдентификатор("Задача", Менеджер, ДанныеВыбора, Параметры, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПредставлениеЗадачи()

Процедура ОбработатьНавигационнуюСсылкуИУникальныйИдентификатор(ГруппаМетаданных, Менеджер, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	ИмяМетаданного = СтрЗаменить(Строка(Менеджер), СтрШаблон("%1Менеджер.", ГруппаМетаданных), "");
	
	СтрокаПоиска = Параметры.СтрокаПоиска;
	НавигационнаяМетаданного = СтрШаблон("e1cib/data/%1.%2?ref=", ГруппаМетаданных, ИмяМетаданного);
	Запрос = Новый Запрос;
	ВыполнитьВыборку = Ложь;
	Условия = ДописатьОтбор(Запрос, Параметры);
	Если СтрНачинаетсяС(СтрокаПоиска, НавигационнаяМетаданного) Тогда
		// Разбор внутренней навигационной ссылки
		УникальныйИдентификаторСсылки = ПолучитьУникальныйИдентификаторНавигационнойСсылки(СтрокаПоиска, НавигационнаяМетаданного);
	ИначеЕсли СтрНачинаетсяС(СтрокаПоиска, "<Объект не найден> (") Тогда
		// Разбор уникального идентификатора ссылки отсутствующего объекта
		УникальныйИдентификаторСсылки = ПолучитьУникальныйИдентификаторОтсутствующегоОбъекта(СтрокаПоиска);
	Иначе
		// Разбор уникального идентификатора
		УникальныйИдентификаторСсылки = ПолучитьУникальныйИдентификаторВПопытке(СтрокаПоиска);
	КонецЕсли;
	Если ЗначениеЗаполнено(УникальныйИдентификаторСсылки) Тогда
		ОрганизоватьВыборкуПоУникальномуИдентификатору(Запрос, ГруппаМетаданных, ИмяМетаданного, УникальныйИдентификаторСсылки, ВыполнитьВыборку, Условия);
	КонецЕсли;
	
	ВыполнитьВыборку(Запрос, ВыполнитьВыборку, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ОбработатьНавигационнуюСсылкуИУникальныйИдентификатор()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция СимволПоНомеру(Текст, Номер)
	
	Возврат Сред(Текст, Номер, 1);
	
КонецФункции // СимволПоНомеру()

Функция ВозможноУникальныйИдентификатор(Текст)
	
	Возврат СтрДлина(Текст) = 36 И СимволПоНомеру(Текст, 9) = "-" И СимволПоНомеру(Текст, 14) = "-" И СимволПоНомеру(Текст, 19) = "-" И СимволПоНомеру(Текст, 24) = "-";
	
КонецФункции // ВозможноУникальныйИдентификатор()

Функция ПолучитьУникальныйИдентификаторВПопытке(Идентификатор)
	
	Если ВозможноУникальныйИдентификатор(Идентификатор) Тогда
		Попытка
			УникальныйИдентификаторСсылки = Новый УникальныйИдентификатор(Идентификатор);
		Исключение
			УникальныйИдентификаторСсылки = Неопределено;
		КонецПопытки;
	Иначе
		УникальныйИдентификаторСсылки = Неопределено;
	КонецЕсли;
	
	Возврат УникальныйИдентификаторСсылки;
	
КонецФункции // ПолучитьУникальныйИдентификаторВПопытке()

Функция РазвернутьГУИДвУИД(СтрокаГУИД)
	
	Фраза1 = Сред(СтрокаГУИД, 25, 8);
	Фраза2 = Сред(СтрокаГУИД, 21, 4);
	Фраза3 = Сред(СтрокаГУИД, 17, 4);
	Фраза4 = Сред(СтрокаГУИД, 1, 4);
	Фраза5 = Сред(СтрокаГУИД, 5, 12);
	
	Возврат ПолучитьУникальныйИдентификаторВПопытке(СтрШаблон("%1-%2-%3-%4-%5", Фраза1, Фраза2, Фраза3, Фраза4, Фраза5));
	
КонецФункции // РазвернутьГУИДвУИД()

Функция ПолучитьУникальныйИдентификаторНавигационнойСсылки(ПредставлениеМетаданного, НавигационнаяМетаданного)
	
	НавигационнаяЧасть = СтрЗаменить(ПредставлениеМетаданного, НавигационнаяМетаданного, "");
	
	Возврат РазвернутьГУИДвУИД(НавигационнаяЧасть);
	
КонецФункции // ПолучитьУникальныйИдентификаторНавигационнойСсылки()

Функция ПолучитьУникальныйИдентификаторОтсутствующегоОбъекта(ТекстИдентификатор)
	
	ТекстИдентификатор = СтрЗаменить(ТекстИдентификатор, "<Объект не найден> (", "");
	ТекстИдентификатор = СтрЗаменить(ТекстИдентификатор, ")", "");
	ПозицияДвоеточия = СтрНайти(ТекстИдентификатор, ":");
	ТекстИдентификатор = Сред(ТекстИдентификатор, ПозицияДвоеточия + 1);
	
	Возврат РазвернутьГУИДвУИД(ТекстИдентификатор);
	
КонецФункции // ПолучитьУникальныйИдентификаторОтсутствующегоОбъекта()

Функция ЯвляетсяНачаломПредставленияДокументаБизнесПроцесса(СтрокаПоиска, ГруппаМетаданных, ИмяМетаданного)
	
	МетаданныеОбъекта = Метаданные[СтрШаблон("%1ы", ГруппаМетаданных)][ИмяМетаданного];
	СинонимМетаданного = ?(ЗначениеЗаполнено(МетаданныеОбъекта.ПредставлениеОбъекта), МетаданныеОбъекта.ПредставлениеОбъекта, МетаданныеОбъекта.Синоним);
	
	МассивПредставлений = fast8DS_ПовторногоИспользованияПереопределяемый.ДополнитьМассивПредставлений(ИмяМетаданного);
	МассивПредставлений.Добавить(СинонимМетаданного);
	
	ЯвляетсяНачалом = Ложь;
	Для Каждого ТекущееПредставление Из МассивПредставлений Цикл
		Если СтрНачинаетсяС(СтрокаПоиска, ТекущееПредставление) Тогда
			ЯвляетсяНачалом = Истина;
			СтрокаПоиска = СокрЛП(СтрЗаменить(СтрокаПоиска, ТекущееПредставление, ""));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЯвляетсяНачалом;
	
КонецФункции // ЯвляетсяНачаломПредставленияДокумента()

Функция ДописатьОтбор(Запрос, Параметры)
	
	Фрагменты = Новый Массив;
	Если Параметры.Свойство("Отбор") Тогда
		Для Каждого ЭлементОтбора Из Параметры.Отбор Цикл
			Фрагменты.Добавить(СтрШаблон("И %1 = &%2", ЭлементОтбора.Ключ, ЭлементОтбора.Ключ));
			Запрос.Параметры.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрСоединить(Фрагменты, " ");
	
КонецФункции // ДописатьОтбор()

Процедура ВыполнитьВыборку(Запрос, ВыполнитьВыборку, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВыполнитьВыборку Тогда
		//@skip-check empty-except-statement
		Попытка
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				ДанныеВыбора = Новый СписокЗначений;
				ДанныеВыбора.Добавить(Выборка.Ссылка);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьВыборку()

Процедура ОрганизоватьВыборкуПоУникальномуИдентификатору(Запрос, ГруппаМетаданных, ИмяМетаданного, УникальныйИдентификаторСсылки, ВыполнитьВыборку, Условия)
	
	Если УникальныйИдентификаторСсылки <> Неопределено Тогда
		Запрос.Текст = СтрШаблон("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2 Ссылка ИЗ %1.%2 ГДЕ Ссылка = &Ссылка %3", ГруппаМетаданных, ИмяМетаданного, Условия);
		
		Если ГруппаМетаданных = "Документ" Тогда
			Ссылка = Документы[ИмяМетаданного].ПолучитьСсылку(УникальныйИдентификаторСсылки);
		ИначеЕсли ГруппаМетаданных = "Справочник" Тогда
			Ссылка = Справочники[ИмяМетаданного].ПолучитьСсылку(УникальныйИдентификаторСсылки);
		ИначеЕсли ГруппаМетаданных = "ПланВидовХарактеристик" Тогда
			Ссылка = ПланыВидовХарактеристик[ИмяМетаданного].ПолучитьСсылку(УникальныйИдентификаторСсылки);
		ИначеЕсли ГруппаМетаданных = "ПланСчетов" Тогда
			Ссылка = ПланыСчетов[ИмяМетаданного].ПолучитьСсылку(УникальныйИдентификаторСсылки);
		ИначеЕсли ГруппаМетаданных = "ПланВидовРасчета" Тогда
			Ссылка = ПланыВидовРасчета[ИмяМетаданного].ПолучитьСсылку(УникальныйИдентификаторСсылки);
		ИначеЕсли ГруппаМетаданных = "БизнесПроцессМенеджер" Тогда
			Ссылка = БизнесПроцессы[ИмяМетаданного].ПолучитьСсылку(УникальныйИдентификаторСсылки);
		ИначеЕсли ГруппаМетаданных = "Задача" Тогда
			Ссылка = Задачи[ИмяМетаданного].ПолучитьСсылку(УникальныйИдентификаторСсылки);
		КонецЕсли;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ВыполнитьВыборку = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОрганизоватьВыборкуПоУникальномуИдентификатору()

#КонецОбласти // СлужебныеПроцедурыИФункции

